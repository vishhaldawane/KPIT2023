





	The "HEIGHT of your SUCCESS" 
		cannot EXCEED the 
			"HEIGHT" OF YOUR "PERSONAL DEVELOPMENT"
		

prosperity formula = 
	Health	Wealth	Relationship	Mental Peace	Social 
	|	  |	     |		 |				
	Yoga    earning   no training    shanti
	Meditation learning
	Gym


		mentors in life


		Java Programming Language

		Language 
		   |
		purpose ? 
	
	how to start learning a language

		listen		speak		read		write
		|		|		|		|
		concepts	concepts	concepts	programs
		interaction/instrospection	+programs


Quality of your attention and intention would decide the quality of the training


				Java Technology
					|
		--------------------------------------------------
		|			|			|
		JSE			JEE			JME
		Standard		Enterprise		Micro
		|Core Java		|main Business
	*Language fundamentals		|
	*Classes and Objects	------------------------------------
	*Constructor		|		|		|
	*OOPS concepts		Session		Entity 		Message
	*packages		  |Spring	|ORM		   |	
	*exception handling   M1<--->M2,3,4..	-------------	SMS Mail Whatsapp
	*multithreading	      |	     ||||||	|	|
	Annotations	   Server  clients	BMP	CMP	
	Reflection		|		Bean	 jdbc queries are automated
	X file i/o	----------------	Managed
	->JDBC		|		|	Persistence -> store Object on DB
	|		stateless	statefull	jdbcs queries are manually
	Adv Java					handled
	|		airindia.com	book ticket	select/insert/update/delete
	Socket programming
	RMI
			bookmyshow.com/app



	0. Simple, no pointers, no need of any h/w background
		no memory management, legacy syntax from C++
	1. WORA/platform neutral
		write once run anywhere
	2. OOPS
	3. Multithreaded - download, upload, print, spell checking, calcs

	4. Robust - automatic garbage collection, exception handling
	5. Secured - 100%, runs in a sandbox - it does not allow DMA
	6. Dynamic - Account accObj = new Account();
				accObj = new SavingsAccount();
				accObj = new CurrentAccount();

	7. Distributed   - Server		Client
			  A.class		B.class

			1		2		3	4	5
	Vendor	    Intel		Sun		IBM	HP	Apple
	|		|		|		|	|	|
	CPU	       x86		SPARC		BB	hps	PowerPC/M1
	|		|		|		|	|	|
	OS	    MS-Windows		Solaris		AIX	hpUX	Macintosh
			|		|		|	|	|
	Compiler  TC++/BC/MSVisual	cc		cc	cc	cc
			|  Studio	|		|	|	|
	Source	---Abc.cpp ---copy-->	Abc.cpp		Abc.cpp .cpp	.cpp
	|		|		|		|	|	|
	Compile ---Abc.obj		Abc.o		Abc.o	Abc.o	Abc.o
	|		|		|same as obj	|	|	|
	Linker	   Abc.exe	   	Abc.out		Abc.out	Abc.out	Abc.out
	|		|		|same as exe		
	Run it     Running	  Running		Running	Running	Running


	JDK - Java development kit
			C:\program files\Java\jdk1.8.xxx> <== JDK 

		javac -- java compiler
		java  -- java interpreter

	JRE - Java runtime environment - minimum environment to run the .class file


	Server
	|.class files are sent to the browser
	|
	|
	Browser [ JRE enabled ] -java.exe must be there to help the browser
			to run the .class files

		

	JVM - java Virtual machine to run your code

		JIT		Byte code
		Compiler ------	Verifier
				|
				|Class Loader
				|
				Execution Engine 
				|  Runtime environment
				|
				Garbage Collector
				   unused objects are declared/marked as garbage
					
	First Code of JPL

	-------------------------
	Minimum unit of JPL is to write a class


	First.java
	-----------
	class First <-- First.class would be generated
	{ <--- Start
		public static void main(String args[])
		{
			System.out.println("Hello World of Java");
		}
	}  <-- End


	javac First.java <-- compilation
		|
		what will it generate???? class file(s)
		what would be the name of the class file(s)
		ANS: as per the classes declared in the source code

	
	First.java (Source Code)
		|
		javac
		|
		First.class (Byte code)
		|
	java First (without extension )





Every public class MUST be stored in its OWN file (.java file)




Naming convention


	ClassName : DriverManager, SystemSettings, DeviceDriver

	fieldName : rollNumber, socialSecurityNumber, employeeNumber

	methodName : setLookAndFeel(), withdraw(), transferFunds()

	CONSTANT   : MAX, MIN, SPEED_OF_LIGHT, GRAVITY_OF_EARTH

	packages   : com.kpit.usa, com.kpit.uk
				no spaces in packages ( becuase directories can have spaces)

				"new york"

----------------------------------------------------------

	Classes			vs			Objects

   design of an object*				instance of a class*

   a simple logical design			a concrete physical appearance
						in the computer memory

   blue print of a house			a real house!!!			
   made on a paper with				as many as you can create
   pencil/scale/stencil

   field + methods				the real field, the real method
   desinged in a container			code is loaded in the memory
   called as class				to execute 
   as a textual design

   class SavingsAccount				SavingsAccount savObj1;
   {						//its a reference to SavingsAccount
	//STATE/FIELDS/NOUN
	private int accountNumber;		savObj1 = new SavingsAccount();
	private String accHolder;			  |	 |	
	private float balance;			   Allocator	its a constructor
						  to create 	to initialize the
	//METHODS/ACTIONS/VERB			  the fields	fields
	void withdraw(float amt){ 
		balance -= amt;
	}
	void deposit(float amt) {
		balance +=amt;
	}
   }


	SavingsAccount savObj1 = new SavingsAccount();
	SavingsAccount savObj2 = new SavingsAccount();
	SavingsAccount savObj3 = new SavingsAccount();



		STACK					HEAP
		|					|
		| (local values)			|(free store)
		|					|
						<------FIELDs of SavingsAccount->
						accountNumber accHolder balance
						---------------------------------
						|	     |         |        |
						---------------------------------
		+---------------------------->  100
		|
		100  <-- value of savObj1		METHODS of SavingsAccount
		savObj1
							SavingsAccount()
							withdraw(), deposit()

						<------FIELDs of SavingsAccount->
						accountNumber accHolder balance
						---------------------------------
						|	     |         |        |
						---------------------------------
		+---------------------------->  200
		|
		200  <-- value of savObj1		
		savObj2



						<------FIELDs of SavingsAccount->
						accountNumber accHolder balance
						---------------------------------
						|	     |         |        |
						---------------------------------
		+---------------------------->  300
		|
		300  <-- value of savObj1		
		savObj3



	

		savObj1.withdraw();
		savObj2.withdraw();
		savObj3.withraw();





	is "sachin tedulkar " a class or an object?

	it is neither the class nor the object
	rather it is an attribute of the object



	class Cricketer
	{
		int rank;
		String cricketerName;
		int age;
		int score;

	}


	Cricketer crickObj1 = new Cricketer();
		crickObj1.setDetails(1,"Sachin Tedulkar",14,500);



	Arrays
	-------

		group of variables
		of similar data types
		stored in consecutive memory location
		referred by a common name

		limitation of an array
			- cannot grow at runtime
			- cannot shrink at runtime
			


	Arrays of Objects
	--------------------

		same way as of the primitives



	Packages
	---------

		packages = directories
		|		|
		java		operating system
				|
				to organize files and folders
					    |		 |
					.class 		packages


main-package			jungle
				|
		---------------------------------
sub		|	|	|	|
packages	cave	tree	house	river
		|	|	|	   |
classes		Tiger	Bird	FarmHouse Fish
		Lion	Nest	Cat	  Frog

		
	Strongest	Stronger      Strong			Weakest
	private		default	      protected			public	

	1. public - available throughout the project/internet
	2. private - only within the class where they are declared
			not available even to the sub class to refer
 
	3. protected - sub class can refer it, within same package(BengalTiger)
		       sub class can refer it via extends  , outside package (WhiteTiger)
		       sub class cannot refer it via the reference of Tiger (t.protectedB) error

		      non-sub class can refer, within same package(Bear)
		      non-sub class cannot refer, outside package (Monkey)

		

	4.          default <-- there is no such keyword as default
				"same package" 
			only available in the same package to sub-class(BengalTiger)/non-subclass(bear)

			sub-class cannot refer it, outside package (WhiteTiger)
			non-sub class cannot refer it, outside package (Monkey)




innovate your own hierarchy of classes like the above example
and try all the four access specifiers
with package, import statements
alongwith public,protected, private, default via sub-classes/non-subclasses

				lecture	5%
				reading	10%
				audio/visual 20%
				demo 30%
				gd 50%
				practice 75%
				teach it to others 90%


Teach to others



	Constructor


		it has the same name as of the "enclosing class"

	class Flight
	{
		int flightNumber; //DATA
		String flightName;
		String source;
		String destination;

		void fly() { }	// FUNCTION/METHOD

		//here a default constructor exists!!!!!
		
		
	}


				constructor 
				|it has the same name as of the enclosing class
	Flight flightObj = new Flight(); <-- it is used to initialize the data of the object
	|	 |	   |	
	class	reference allocator <-- it is following the allocator

			if the allocator is failed, the constructor must fail
			if the constructor is failed, the allocated data is rolled back


		a constructor is invoked during object creation process
		it is invoked only once per object reference
		it cannot be invoked post to the construction
		it cannot be invoked manually using the reference

		flightObj.Flight(); //not possible | error

		it can take arguments
		and it can be overloaded


	
	OOPS
	-----

		Object Oriented Programming System


	1. Abstraction | FOR THE USER | END USER | CUSTOMER


		- hiding the complexity of an object
		- while hiding, provide the USAGE of the object via accessible(public)functions
		- it is a "what is?" part of an object | USAGE of an object

		- hiding the data | data abstraction | total cash inside the ATM is hidden
		- hiding the methods | printing/logging/counter functionality is hidden
		- hiding the inner/nested classes | some internal components are hidden

			What is an ATM?
				- *** withdraw cash!!! ***
				- change pin
				- mini statement
				- check balance
				- cheque book request

	2. Encapsulation | TASK OF THE DEVELOPER | BACKEND TEAM
		- it is a "How is it?" part of an object
			How the ATM is functioning???
				- how the cash is dispensed???
				- how the pin is changed?
				- how the mini statement is generated?
				- how the balance is checked?
				- how the cheque book request is processed?



		class ATM
		{
			private double totalCash; //data abstraction
			private int numberOfCustomersHit;
			
			private void dispenseCash(float amt) { } //procedural abstraction

			private class SecurityManager() {  // class abstraction
					void secureTheUser() { }
					void logTheUser() { }
			}		

			public void withdraw(float amt) { //PROVIDE the USAGE |public functions
				..
				SecurityManager secMan = new SecurityManager();
				secMan.secureTheUser();
				secMan.logTheUser();
				dispenseCash(amt);
				...
				secMan.releaseTheSecurity();
			}
		}


		Mountain vs Valley
		|		|
	     co - created at the same time


	3. Polymorphism

		ability  of a business entity to have multiple forms

		a. function overloading - early binding 
			- we can redefine a function with same name provided
				i) with number of arguments
				ii) type of arguments
				iii) sequence of type of arguments

		b. function overriding  - late binding
		c. operator overloading* - not in java 

		misnomer - static polymorphism
				runtime polymorhpishm 

			polymorphism is always/by default dynamic [ runtime ]

			

	4. Inheritance
		Ability of a class/entity to acquire properties from 
		existing business entities

				Air	Water	Fire	Earth	Sky
				arrangement of above properties is qualitative and quantitative

						LivingBeing
							|
				--------------------------------------------------------------
				|4				|3	   	|1	|2		
				Animal <-- most generalized	Tree		Stone	Metal	
				  |				|	   	|	 |immovable
			  ------------------------	Flowring NonFlowering	Marble	Steel <-- proton (is not dead)
			  |			 |	   |		|	 	
			Mammal			Bird     Rose		Cactus
			  |giveBirth() -isA	|layEggs()
		--------------------------	---------------
			|5		|		|
			Human		Tiger		Parrot
			  |isA
			Person <-- as a regular personality
			|isA
		---------------
		|
		Student <--u are here at college/school time
		|isA
	--------------
	|isA
	Employee <-- u are here - most specialized

	Single Level
	A
	|
	B

	Multi Level

	A
	|
	B
	|
	C

	Multiple level - via interfaces in java

		
	A(c)	C(i)	D(i)
	|	|	|	
	-----------------
	|
	B *multiple parents 



	Hierarchical level

	A	F(i)
	|	|
	+--------
	|
	B	D(i)	E(i)
	|	|	|
	-----------------
	|
	C


	5. Object communication
		





			Doctor
			|
		----------------
		|
		Surgeon
		|
		|
	---------------------
	|		|
	HeartSurgeon	NeuroSurgeon




	super() - refers to the nearest super class's constructor invocation
		- must be the FIRST statement FROM A CONSTRUCTOR 

	this.  - refers to the current class's object field/functions

	this() - one constructor invokes another constructor of the same class

	super. - refers to the nearest super class data or function if they are accessible
		NO SUCH RULE OF SEQUENCE FOR SUPER.


	isA  relationship - Aggregation 

	

	hasA Relationship - Composition
	
		"whole entity" consist of muliptle "part entities" that vital to its
		existence




	class Wheel { }
	class Engine { }
 	class Vehicle { }

	class Car extends Vehicle { //isA
					//data type of Car is also Vehicle

		Wheel wheel1 = new Wheel(); //hasA - vital
		Wheel wheel2 = new Wheel();
		Wheel wheel3 = new Wheel();
		Wheel wheel4 = new Wheel();

		Engine engine = new Engine(); //hasA - vital
	}


	class Heart
	{
		void pumping() {
		}
	}
	clas Lung {
	}
	class Liver { }
	class Human 
	{
		Heart myHeart = new Heart();
		Lung leftLung = new Lung();
		Lung rightLung = new Lung();
		Liver liver = new Liver();

	}

	class HeatingCoil { }

	class Microwave extends Machine {
		HeatingCoil heatCoil = new HeatingCoil();

	}




	class Building 
	{

	}
	class Area
	{
		Buildings buildings[]
	}
	class City
	{
		Area area[];
	}

	class State
	{
		City cities[];
		
	}

	class Country
	{
		State state[];
		..
	}

		

		Passing object as an argument to a method
		Returning Object as a return value from a method





	if i want to make a lemon juice 

	what is required


	1. lemon
		size,
		color
		qty
		juicy or not
		
		
	2. sugar
		color
		qty
		type / organic or inorganic


	3. water
		qty
		type | filtered | mineral | tap water
		

	4. Lemon Juice


	Lemon - 1 lemon = 5 Rs
	Sugar - 1 spoon - 2 Rs
	Water - 250 ml - 5 rs
	--------------------------
			12 rs

	if u order this lemon juice in a shop????
	
	50/60Rs - infrastructure cost!!! facility
		- making facility!!!!-chef to make it
		- chair / sofa / table
		- employee to serve it
		- time consumed to make it done by hotel people
		- time consumed to fetch this raw material from market done by them
	
		- WE JUST HAVE TO ORDER LIKE A KING
		- HENCE WE HAVE TO PAY LIKE A KING
		- EARN LIKE A KING
		- EARN LIKE A KING, WE HAVE TO LEARN LIKE A KING
		
	LAW OF ATTRACTION - SIMILAR FREQUENCIES CAN RESONATE WITH EACH OTHER
				WITHOUT ANY EFFORT [ EFFORTLESS ]

			
	



		Person x = new Person();

		Person y = x;

					  gender	age	name
					  M		23	Jack
		+------------------------>100
		|			 |
		100			100
		x			y

	two references are pointing to the same object

	changes made via x can be reflected to y or vice versa

	






	method overriding
		- let subclass define(redefine) a function 
		which is already present in the super class


	

			FIELD		METHOD		CLASS
	---------------------------------------------------------------
	final		constant/	cannot be	cannot become father/r	
			cannot be	overridden	cannot be subclassed
			changed

	---------------------------------------------------------------
	static		share the	to refer
			fields across	the other
			all the objects static 
			of a class	members

	---------------------------------------------------------------
	abstract	NA		partial		a class that has
					contract of	partial contract
					a class		- may have abstract
					- undefined	methods
					method/		
					method without
					any code body
					withdraw(); <----BankAccount
					deposit();  <----BankAccount
								|
							SavingsAccount  CurrentAccount 
								CreditAccount


	an abstract method must reside in a abstract class
	but an abstract class may/maynot have abstract methods

	ABSTRACT CLASS MEANT FOR INHERITANCE


	
abstract = partial contract [ ur brain has some hint | foggy hint ]

interface = pure partial contract [ even a hint is not there ]



				BankAccount <-- abstract | generalization
				   |
			-------------------------------------
			|		|		|
implementations	-> SavingsAccount	CurrentAccount	CreditAccount <-- specialization
			rate		overdraft	creditLimit,cashLimit
			

				Inheritance 

		Derivation		vs		Implementation
		
		Doctor					BankAccount <-- abstract
		|diagnose(){}				|withdraw(); deposit(); <--abstract
		Surgeon					SavingsAccount
		|is overriding mandatory???		|is implementation mandatory??YES
		HeartSurgeon				FixedDepositAccount
		| is overriding mandatory???		|is overriding mandatory?? NO

	overriding is totally at
	the discretion of the developer
	or the child class












	non-static			vs		static
	(instance members)				(class's members)
	|						|
	loaded per object				loaded only once
							- shared across all the 
							objects 

	loaded only after				pre-loaded before any 
	instance creation				single instance


	use the object reference			use ClassName to refer them
	to refer them (subject				(subject to access)
	to access)




One thing in the universe is CONSTANT, and that is CHANGE










visualize any Instrument !!!
visualize any MusicalInstrument!!!		
visualize any MedicalInstrument!!!


		pure partial contract

1				Instrument <-- pure parial contract - interfaces
				    |		strict version of abstract classes
				    |          all methods are partial [ without code body]
				    | use();
		-----------------------------------------
		|					|
2	MusicalInstrument			MedicalInstrument <-- abstract 
		play();					operate();	
		|					|
	-------------------------		-------------------------
	|			|		|			|
3  StringBasedMusical   AirBasedMusical	  SurgicalMedical	PathologicalMedical
	Instrument	Instrument		Instrument		Instrument
	|			|		|			|
	tuneStrings();	  blowAir();		sterilize()		read();
	|			|		|			|
  -------------		-----------------	----------		----------
  |	|		|		|	|	|		|	|
4 Guitar Violin		Flute		Trumpet Needle  Cutter	 GlucoMeter Cardiogram
  pluck() bow();   operateSixHoles() slide();   stitch()  cut()  readSugar()  readHeartBeats()
  tuneString            blowAir			   sterilize()			read()
    <------------play-------------------->	<-----------operate---------------->
  <-----------------------------------------use()----------------------------------->





Exception handling

		Exception = runtime error


				Errors
				|
	-----------------------------------------------
	|	  |		|	|	  |
	compile  linker	   runtime	fatal   logical
	|	 |		|	 |	    |
	syntax missing	    Exception   threat	    4+4=16 (logically wrong formula)
		libraries		to an
					app to	
					terminate



		checked			vs		unchecked



		long Drive				short drive
		|					|
		200km					5km
		|					|
		FirstAidKit				X
		should be carried

		Stepney (spare)				X	
		wheel
	
		carry some food				X

		FuelTank to be				X
		fulled

		carry Water				X

		Phone charger				X		

		built in charger			X
		in the car

		Insurance policy			Y
		RC book					Y
		PUC					Y
		driving license				Y

		make sure car is			X
		serviced or not

		brake pads to				X
		be verified

		coolent					X

		engine oil				X

		speed cameras				X	
		to be spotted
		well in advance
		 				  red signal to be honoured
						  or might be dishonoured

						  
						  tyre punctured 

						  accident 
		-----------------------------------------------									


				Object
				| 11 methods
				|    hashCode(), equlals(), wait(3),notify(), notifyAll =7
				|    toString(), clone(), finalize(), getClass() = 4
				Throwable
				|
			----------------------
			|		|
			Error		Exception
			|		|"checked" by the compiler |  except the RuntimeException |  can be caught using the catch block
	VirtualMachineError	--------------------------------------------
	ThreadDeath		|		|			|
	StackOverflowError	|		CarDocumentException CheckFuelException
				|
		--------------------------------------
		|
	RuntimeException
		|"unchecked" by the compiler
----------------------------------------------------
	|	    |	|	|	     |	|
ArithmeticException | NullPointerException   |	RedSignalDishnouredException
	IndexOutOfBoundsException	TyrePunctredException
		    |
	------------------------------
	|			|
ArrayIndexOutOfBoundsException, StringIndexOutOfBoundsException
	
	





		try    catch   finally

		throw throws



		try
		{
			if these 5 lines are teh part of a particular business logic
			1
			2
			3
			4
			5
		}
		catch() { }//problem of line 1
		catch() { }// problem of line 3
		catch() { } //problem of line 5

		..
		..

		try	
		{
			another business logic here, nothing to do with previous try/catch
			1
			2
			3
		}
		catch() { }






	to create user defined exception
	we have to decide if it is checked / uncheck


Multithreading
------------------------------------------
	
Thread 
	|
	set of statements
	set of instructions


Accounts
----------
------------------------------------
|101  Suresh  [ 90000    <--t2 ] 	    
------------------------------------
102  Dinesh  60000
103  Rajesh  70000
104  Haresh  80000
105  Zubair  90000

			Cash Deposit Counter
	
	Board			Board			Board
	1-75			76-150			151-225
	Teller1			Teller2			Teller3
	|			|			|
	getBalance()		getBalance()		getBalance()
	|			|			|
	calcAmt()		calcAmt()		calcAmt()
	|			|			|
	setBalance()		setBalance()		setBalance()
	|			|			|
	Customer1		Customer2		Customer3
time	10.30			10.30			10.30
a/c	101			101			101
cash	5000/-			7000/-			8000/-
deno..	100Rs.			50Rs.			2000Rs.
count	50notes			140Notes		4notes

	Customer4		Customer5
	

	Thread synchronization




	Eatable(i)		Runnable(i) <--interface
	|eat();			| run();
	----------------       -----------|
	|		|      |	  |
	|		|      |	  |
	FoodItem	|Stone Frame	  Thread <--regular class
	|eat(){}	| |    |	    |run() { }
	|prepare(){}	| |    |	    |start() { } ------ > Thread Scheduler
	|		| |    |         
	|		| |    |		 Vehicle
	|		| |    |		    | 
	|		| |    |	-----------------------------
	|		| |    |  	|	|	|	|	|
	Samosa         Chalk  MyFrame	Car	Train	Ship	Flight
						Bike, Ship Yatch Boat Cycle
		
						Rocket, Helicopter, BullockCart,
						HorseCart, Horse


1)			Runnable*
			|run();
			|
			Thread**
			|start(){Main Logic Of Threading}
			|
			Car (grand child of Runnable)


2)			Runnable*	Vechile**
			|run();		  |
			|		  |
			+---------------+ |
			|	        | |
			Thread		Car (Car is direct child of Runnable)
 	             ==>start()<==
			
			Pass the Car's Object to the Thread's constructor
			


interface Eatable { void eat(); }

class FoodItem implements Eatable {
	public void eat() { }
}
class Samosa extends FoodItem {

}

class Stone { }
class Chalk extends Stone implements Eatable {
	public void eat() {//mandatory
	}
}

1)  extend from Thread class
	Car	Train Ship  Flight

2)  implement Runnable interface
	MyFrame



	Priority

	MIN_PRIORITY	NORM_PRIORITY	MAX_PRIORITY
	1		5		10
			(default)

	Lets make 2  number counter threads

		Couter1		Counter2
		while		while
		 i++		 i++

		Min		Max

----------------------------------------------------------------

Collections
-------------

			A Bag - or a sac - bori 

		to hold the content


Components orthogonal space


				Content
				|x
				|	Water
				|	FriedRice
				|	Noodles
		---------------------------------
		|				|
		Container			Algorithm
		 |y		i		|z
		 +------------Iterator----------+
		 |		|		|
	       Glass		Straw		stir/drink/mixit/pourIt
	       Plate		Spoon		eatIt
	       Bowl		ChopSticks	eatIt	


		Eating(z) Algorithm
		    \
                   / \ <-- ChopSticks(i) to iterate through the content, to hold the noodle
		  /   \
	      \	 noodles <---- content x
	       \   @@@@  /
		\&&&##	/ <---- container
		---------	 y

		Eating(z) Algorithm
		   \
                    \ <-- Spoon(i) to iterate through the content, to hold the rice
		     @
	      \	 rice<------ content x
	       \  .....  /
		\......	/ <---- container
		---------	 y


				     Iterable(i)
					|
				Collection (i)
					|
			-----------------------------------
			|				|
			List				Set
			|duplicates			|unique
		--------------------		-------------------
		|		|		|		|
	   ArrayList	  LinkedList	   TreeSet	   HashSet
	   |		     |			|		|
==>	elevator	   staircases		tree	      fruiter shop

	growable	node1 p/n	node2 p/n	
	at the		 100	|------>200   | | 	 node3 p/n	
	end		 <--------------|------+ --------->300  |
					|-----------------------+	
	search is		DML flexible
	faster			not efficiency

	insert in
	beween is 
	poor

Phone Logs Records

Reeta 10.30
Seeta 10.30


indx	value
0	10
1	20
2	30
3	40
4	50


	dead end of the car shed
	--------
	|1	|
	 2
	 3
	 4
	 5
	 6
	 7
	 8
	 9
	 10
	 11
	 12
	 
---------------------------------------------------------------


TreeSet

Atomic Number  : 79 47 3 13 26
Atomic Formula : Au Ag Al Li Fe
Atomic Name    : .....
Atomic Weight  : .....


AVL 
			Root
			|47
		--------------------------
		|<			|
	       LeftChild		RightChild
		|13			|79
	-----------------	-----------------
	|		|	|		|
	LLC		LRC	RLC		RRC
	|3		26


	RootLeft

	3 13 26 47     79
	<--L--> Root  <---R--->

		R	root	L





	BMP
	Bean managed persistence
			|
			storing the java object on the database in the form of a ROW



	JDBC - manual way to do it


		Java Databaes Connectivity

	
		FrontEnd			BackEnd
		|				|	
		JAva				HSQLDB / MySQL/ Oracle / MSSQL
		|				|
		+------------Driver-------------+
		|		|		|
		provided	Third		DB Provider
		by Oracle	Party		would give us the driver
		Corporation			


		1. Know your database : HSQLDB
		2. Know the Driver class : org.hsqldb.jdbc.JDBCDriver.class file
				this driver most of the time is kept in a jar file
			/Users/apple/hsqldb-2.6.1/hsqldb/lib/hsqldb.jar
		3. Load the driver
			(class)->DriverManager.registerDriver();

		4. Connect to the database
			DriverManager.getConnection(dsn, username, password)
		
		5. Once u get the *Connection
				make a desired statement
				 |
			----------------------------------
			|		|		|
		*Statement     *PreparedStatement	*CallableStatement
		SELECT	      INSERT/UPDATE/DELETE   procedure/functions


--------------------------------



	select * from dept
	select * from emp
	select * from customer
			 |
	<-----------> variable portion

	insert into emp  values (?,?,?)	
	insert into dept values (?,?,?,?,?)
	insert into cust values (?,?,?,?)
	<--------->  |   <----->   |
	 fixed            fixed

	
	select * from ?		
		 |
		result.getInt(1) <-- output from 1st column
			 |

	Dept                   Emp		Cust
	|	----------------|---------------|
	|	|		|		|
	Department	    Employee		Customer <--------- POJO
	getDeptno() { }	    getEmpno() { }	getCustoNo() { }  Plain OldJava Object

		deptno		empno		custno




		Select
		Insert
		Update
		Delete
		
		what is repeating????

		1. DriverManager.registerDriver
		2. Connection conn = DriverManager.getConnection
			
		

		3. Statement		- Select Query
		   PreparedStatement	insert
		   PreparedStatement	update
		   PreparedStatement	delete


		Table			this is the Pojo for this Table
		Dept			Department
		Emp			Employee
		Cust			Customer




	Dept (1) ------ Many Employees

	Many Employee ---- (1) Dept

	Employee (1)------(1) Pancard
	

	Many Employees	Many Projects



project
-----------
projectid   projectname	  deadline
55		airline		.
66		banking		..
77		insurance	..


project_emp <-- many to many 
-----------
pid	empno
55	101
55	102
55	103
66	101
66	102
66	103


Dept
--------
PK
deptno	dname	loc
10	IT	NY
20	Sales	ND
30	Purchase NJ

	emp
	-----
	PK				FK
	empno	ename  job  	sal  deptno
	101	Jack   manager   5000  10 
	102	Jane   developer 4000  10
	103	Jill   tester    3500  10
	104	Suresh manager   5500  20 
	105	Rajesh clerk     4400  20
	106	Dine   accountant3560  20

pancard
---------
PK						FK
panid		issuedby  dob	fathername    empno
JRHTD8976A	..	  ..	 ...		101
asdf						102
dfasdf						103
afdsfd						104
aserdf						105
dkafhdaskf					106



		Tables are not Classes

		Classes are not tables



1	Dept					Department
	 table					   class [ pojo ]
	|
N	Emp					Employee


						class Department { 1
							int depno
							String dname
							STring loc
							N -> ArrayList<Employee> emps;
						}
						class Employee { 1  /  N
							int empno
							String ename
							float sal;
							Date doj;
							1 PanCard pcard = new PanCard();
						
							N ArrayList<Project> projects;
						}
		ORM = Object Relational Mapping F/w


		Hibernate 
		|
	------------------
	|		|
	xml		annotation
	X		YES



	Project management Tool to make such f/w based application
		- to download libraries
		- to update the libraries
		- to take care of portability issues
		- version conflicts

	Test 4		Test 5			Test 5.5
	HSQLDB 2.5	2.6			2.7
	Java 8		Java 11			Java 17
	Machine1	Machine2		Machine3
	|		|			|
	YourLaptop	CompanyLaptop		ClientLaptop
	|		|			| BOA
	Shubham K	..			..

	Java code	->			->

Now onwards no one will create simple java project

rather -- Maven Project to be created

	pom.xml
	| will have depedencies declared
	Maven Project



		FirstProject
			|
	-----------------------------------
	|		|
	pom.xml		src
			|
		-----------------------------------
		|			|
		main			test
		|			|
	---------------------		test cases
	|		|
	java		resources	
	|			|
	your code	configuration files


	right click
	|
	------> run->maven build...
				|
				goals
				|
			clean compile  exec:java -Dexec.mainClass="Test"



7 habits of highly effective people
	- Stephen Covey

10 mnts video to cover the entire book

You cannot decide your future, but you can decide your habits.
and your habits will decide your future.

		habit = neural wiring
			it can be refixed with 21 days of efforts

	PERSONAL VICTORY / INTERNAL WORLD
	1. Be Proactive 
	2. Begin with the End in Mind
	3. Put first thing first


	4. Win - Win

	PUBLIC VICTORY / SOCIAL / FAMILY / OFFICE / OUTSIDE WORLD
	5. Seek first to understand then to be undertood
		Be interested, and then be Interesting
	6. Synergize
	7. Sharpen the SAW 

		

	

	meta physics
	|	|
	|	java
	|
	the points shared with me



	

	ORM
	---
		Object Relation Mapping

	What you need to run an ORM Project


	1. ORM Libraries | pom.xml dependencies -> hibernate/jpa/junit
	2. Database | hsqldb | started in cmd prompt | and interface in another cmd
	3. A Table | mydept120
	4. A Pojo mapped with the Table | Department.java
	5. a configuration file to talk to ORM | MAKE IT NOW
	6. A client program to test the ORM    | MAKE IT NOW



		2.Database				2.Database
		3.Table					3.Table
		4.POJO					4.POJO
		|					|
		BMP					CMP
		|					|
		jdbc code				an ORM f/w
		manually written			would perform jdbc for us
		|					|
		DriverManager.registerDriver		1.ORM Libraries
		DriverManager.getConnection		5. a config file 
		Statement				6. The client code
		PreparedStatement
		6. client code
		ResultSet

	2.HSQLDB
	3. Table
		KpitOrmProject	
			|
	-----------------------------------
	|		|
	pom.xml		src
	(1) orm jars	|
		-----------------------------------
		|			|
		main			test
		|			|
	---------------------		very soon to be written
	|		|
	java		resources	
	|OrmTest.java(6)	|
	entity			META-INF <-- must be in this folder 
	|			|
  Department.java (4)		persistence.xml <-- must be this name
				(5) |
				  Driver/URL/username/password
				and other ORM settings

	persistence.xml file is read by THE ORM F/w to know 
	the details of driver/username/password/url
	the db dialer
	create/update table strategy
	connection pool	
	threading details...


	JDBC			ORM
	|			|
	insert			persist() <--JPA / save() <-- hibernate
	update			merge() <-- JPA  / saveOrUpdate <-- hibernate
	delete			delete()/remove
	select			get
	select many recs	jpql [ java persistence query langauge ]




			Java Object
				|Department dept = new Department();
		------------------------------------
		|			|	
		File			Database
		|			|
	ObjectOutputStream		----------------
	ObjectInputStream		|		|
	|				BMP		CMP
					|		|
					jdbc code	ORM
	
	    Jenkin
					
	Dev	Ops
	|	|
developer	deployer
testerss	End users to use it



-------------------------------------------

I.   3 MCQ Tests
II.  Mini Code Marathon
III. Code Marathon


	1st MCQ - 20 questions - Thursday : 8.30 offline mode from office
	2nd MCQ - 20 questions - Friday   : 8.30 offline mode from office

	3rd MCQ - 20 questions - Saturday : 8.30 offline mode from office
					    I will be there
		
			9 to 10.30 - Mini Marathon - 3 questions

			11 to 1 - Code Marathon	- 5 questions





	Spring Framework

			- DI / IoC
		
			Dependency Injection / Inversion Of Control


	interface Flower {
		void flowering();
	}		

	class Rose implements Flower {
		public void flowering() {
		
		}
	}

	Garden
	{
		Flower getFlower() {
			Flower flower = new Rose();
			return flower;
		}
	}
	FlowerTest {
		main() {
			Rose rose = new Rose(); // discourage this
			
			Garden garden = new Garden();
			Flower flower = garden.getFlower();
		}
	}





























	1. Your Pojo | business entity | Rose Lotus etc...
	2. a configuration file | spring.xml | or any alian name
	3. Spring libraries | pom.xml dependencies
	4. a client code | a test code or  main method


	

DAO Design pattern

	Data Access Pattern


	Manual Way			Automated Wa
	BMP				CMP
	Pure JDBC Code			ORM
	|				|
	DriverManager			EntityManagerFactory
	Connection			EntityManager
	Statement			EntityTransaction
	ResultSet			em.persist(deptObj);
					em.find(Department.class,20);
		|			|
		+-----------------------+
			   |
			  DAO

	Kitchen
	|	Chefs are here busy creating food | BMP | CMP
	|		DATABASES [1] + POJO [2]  
	|
	Cafeteria
			Person1 Person2 Person3 <-- people to serve the food
			Food Counter [DAO] [3]
	
						SERVICE LAYER[4]	BUSINESS LOGIC | what food you want? qty ?
								 | card/gpay/food cards/cash/
	Customer ---> Service counter to get the Food Coupon <-- BILLING MACHINE
	|						empno/menu choice				 
	|						CONTROLLER [ 5]
	Food Menu
	| [ ANGULAR UI ] [6]
	we search for our 
	favourite food

	Table1	Table2	Table4	...	Table10
	

	Cook is also known as Chef

1 DB
2 Pojos <--- @Component
3 DAOS  <--- @Repository [ it would do inventory kind of activity DML operations]
4 Service <--@Service[ some type of service for the client ]
5 Controller<-@Controller [ controll the customers ]
6 UI

Spring MVC

	MVC
		
						prn number
	empno		insurance policy no	to know flight ticket details
	7839		1234
	|
	--------------
		|
		Controller - A servlet - Dispatcher Servlet
		| request / response
	------------------
	|		|
	Model		View		
	(data)		|
	1. database	static : html / css 
	2. pojo		dynamic : jsp pages
	3. repositories



	Apartments
	where i live

	Building1		Building2	Building3
	   A			B		C
	   |			|		|
	 controller1		Controller2	controller3
		|		|		|
	   ----------------------------------------
			|
			|
		Common Security Reception Gate
			FrontController
			|
			|
		--------------------------
		|	|	|	|	   |	
	Existing    Visitors  Relatives SalesPeople ...	
	Residents	|	|	|
	  |		
   --------------
  |      |     |
 walk   bike  car



----------------------------------------------------------------

	Java Programs are of 3 types

	1. Application		2. Applets		3. Servlets
		|			|			|
		main()			life cycle methods
							is used to generate
							dynamic web output





				web output
				|
			-------------------
			|		|
			static		dynamic
			|		|
			html		--------------
			css		|	     |
				  executed	executed
				at the client	at the server
				|			|
				Browser			ApacheTomcat
				|			|
				java script		Servlet


	MVC PATTERN
	--------------


	STATIC PAGE
	--------------
	login.html/login.css					[ MODEL ]
	-----------------					to the DB
	Enter username <input type=text name="uname">		will connect
	Enter password <input type=password name="upass">	    |	
	<input type=submit name=submit value="Login"> ----> will hit| a servlet
						|	may a LoginServlet
						|		|[ CONTROLLER ]
						|	will decide a dynamic
						|	output as below
						|
				-------------------------------
				|			|
			User Logged in		Login Failed
			[ VIEW1 ]		[VIEW 2]





 STATIC PAGE
        --------------
        emp.html/emp.css                                    [ MODEL ]
        -----------------                                       to the DB
        Enter empno <input type=text name="eno">           will connect
        Enter password <input type=password name="epass">           |   
        <input type=submit name=submit value="Show Emp"> ----> will hit| a servlet
                                                |       may a EmpServlet
                                                |               |[ CONTROLLER ]
                                                |       will decide a dynamic
                                                |       output as below
                                                |
                                -------------------------------
                                |                       |
                        Emp Info 		 Emp Login  Failed
                        [ VIEW1 ]               [VIEWEmp Login 



1. convert your web application into a maven app
2. add the dependencies in pom.xml

3. add the DispatcherServlet in web.xml
		|
	FrontController


4. create spring-servlet.xml file <--spring beans configured here




request-->		FrontController ----req--> Controllers
response<-------	DispatcherServlet	 [ your specific controllers]
			|	|	<----resp------
			|	|
			|	|
			view pages





